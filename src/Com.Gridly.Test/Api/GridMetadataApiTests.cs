/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0-SNAPSHOT
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Com.Gridly.Client;
using Com.Gridly.Api;
using Com.Gridly.Model;

namespace Com.Gridly.Test
{
    /// <summary>
    ///  Class for testing GridMetadataApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GridMetadataApiTests
    {
        private GridMetadataApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new GridMetadataApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of GridMetadataApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' GridMetadataApi
            //Assert.IsInstanceOf(typeof(GridMetadataApi), instance);
        }

        
        /// <summary>
        /// Test Create
        /// </summary>
        [Test]
        public void CreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gridId = null;
            //CreateMetadata createMetadataDTO = null;
            //var response = instance.Create(gridId, createMetadataDTO);
            //Assert.IsInstanceOf(typeof(Metadata), response, "response is Metadata");
        }
        
        /// <summary>
        /// Test Delete
        /// </summary>
        [Test]
        public void DeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gridId = null;
            //string metadataId = null;
            //instance.Delete(gridId, metadataId);
            
        }
        
        /// <summary>
        /// Test Get
        /// </summary>
        [Test]
        public void GetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gridId = null;
            //string metadataId = null;
            //var response = instance.Get(gridId, metadataId);
            //Assert.IsInstanceOf(typeof(Metadata), response, "response is Metadata");
        }
        
        /// <summary>
        /// Test List
        /// </summary>
        [Test]
        public void ListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gridId = null;
            //var response = instance.List(gridId);
            //Assert.IsInstanceOf(typeof(List<Metadata>), response, "response is List<Metadata>");
        }
        
        /// <summary>
        /// Test Update
        /// </summary>
        [Test]
        public void UpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string gridId = null;
            //string metadataId = null;
            //UpdateMetadata updateMetadataDTO = null;
            //var response = instance.Update(gridId, metadataId, updateMetadataDTO);
            //Assert.IsInstanceOf(typeof(Metadata), response, "response is Metadata");
        }
        
    }

}
