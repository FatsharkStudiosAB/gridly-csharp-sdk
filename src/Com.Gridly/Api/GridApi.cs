/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.21.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGridApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <returns>Grid</returns>
        Grid Create (string dbId, CreateGrid createCompositeGrid);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> CreateWithHttpInfo (string dbId, CreateGrid createCompositeGrid);
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns></returns>
        void Delete (string gridId);

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteWithHttpInfo (string gridId);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>Grid</returns>
        Grid Get (string gridId);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> GetWithHttpInfo (string gridId);
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>List&lt;Grid&gt;</returns>
        List<Grid> List (string dbId);

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        ApiResponse<List<Grid>> ListWithHttpInfo (string dbId);
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Grid&gt;</returns>
        List<Grid> ListTemplateGrids ();

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo ();
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <returns>Grid</returns>
        Grid Update (string gridId, UpdateGrid updateCompositeGrid);

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <returns>ApiResponse of Grid</returns>
        ApiResponse<Grid> UpdateWithHttpInfo (string gridId, UpdateGrid updateCompositeGrid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> CreateAsync (string dbId, CreateGrid createCompositeGrid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> CreateWithHttpInfoAsync (string dbId, CreateGrid createCompositeGrid, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// delete
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> GetAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> GetWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        System.Threading.Tasks.Task<List<Grid>> ListAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListWithHttpInfoAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// listTemplateGrids
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        System.Threading.Tasks.Task<Grid> UpdateAsync (string gridId, UpdateGrid updateCompositeGrid, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// update
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Grid>> UpdateWithHttpInfoAsync (string gridId, UpdateGrid updateCompositeGrid, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GridApi : IGridApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GridApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// </summary>
        /// <returns></returns>
        public GridApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GridApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GridApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <returns>Grid</returns>
        public Grid Create (string dbId, CreateGrid createCompositeGrid)
        {
             ApiResponse<Grid> localVarResponse = CreateWithHttpInfo(dbId, createCompositeGrid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> CreateWithHttpInfo (string dbId, CreateGrid createCompositeGrid)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            // verify the required parameter 'createCompositeGrid' is set
            if (createCompositeGrid == null)
                throw new ApiException(400, "Missing required parameter 'createCompositeGrid' when calling GridApi->Create");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter
            if (createCompositeGrid != null && createCompositeGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCompositeGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCompositeGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> CreateAsync (string dbId, CreateGrid createCompositeGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await CreateWithHttpInfoAsync(dbId, createCompositeGrid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="createCompositeGrid">createCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> CreateWithHttpInfoAsync (string dbId, CreateGrid createCompositeGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->Create");
            // verify the required parameter 'createCompositeGrid' is set
            if (createCompositeGrid == null)
                throw new ApiException(400, "Missing required parameter 'createCompositeGrid' when calling GridApi->Create");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter
            if (createCompositeGrid != null && createCompositeGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createCompositeGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createCompositeGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Create", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns></returns>
        public void Delete (string gridId)
        {
             DeleteWithHttpInfo(gridId);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteWithHttpInfoAsync(gridId, cancellationToken);

        }

        /// <summary>
        /// delete 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Delete");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Delete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>Grid</returns>
        public Grid Get (string gridId)
        {
             ApiResponse<Grid> localVarResponse = GetWithHttpInfo(gridId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> GetWithHttpInfo (string gridId)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> GetAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await GetWithHttpInfoAsync(gridId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> GetWithHttpInfoAsync (string gridId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Get");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>List&lt;Grid&gt;</returns>
        public List<Grid> List (string dbId)
        {
             ApiResponse<List<Grid>> localVarResponse = ListWithHttpInfo(dbId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        public ApiResponse<List<Grid>> ListWithHttpInfo (string dbId)
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Grid>> localVarResponse = await ListWithHttpInfoAsync(dbId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dbId">dbId</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListWithHttpInfoAsync (string dbId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'dbId' is set
            if (dbId == null)
                throw new ApiException(400, "Missing required parameter 'dbId' when calling GridApi->List");

            var localVarPath = "/v1/grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dbId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dbId", dbId)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// listTemplateGrids 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Grid&gt;</returns>
        public List<Grid> ListTemplateGrids ()
        {
             ApiResponse<List<Grid>> localVarResponse = ListTemplateGridsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// listTemplateGrids 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Grid&gt;</returns>
        public ApiResponse<List<Grid>> ListTemplateGridsWithHttpInfo ()
        {

            var localVarPath = "/v1/template-grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// listTemplateGrids 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;Grid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Grid>> ListTemplateGridsAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<Grid>> localVarResponse = await ListTemplateGridsWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// listTemplateGrids 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;Grid&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Grid>>> ListTemplateGridsWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/template-grids";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTemplateGrids", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Grid>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Grid>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Grid>)));
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <returns>Grid</returns>
        public Grid Update (string gridId, UpdateGrid updateCompositeGrid)
        {
             ApiResponse<Grid> localVarResponse = UpdateWithHttpInfo(gridId, updateCompositeGrid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <returns>ApiResponse of Grid</returns>
        public ApiResponse<Grid> UpdateWithHttpInfo (string gridId, UpdateGrid updateCompositeGrid)
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            // verify the required parameter 'updateCompositeGrid' is set
            if (updateCompositeGrid == null)
                throw new ApiException(400, "Missing required parameter 'updateCompositeGrid' when calling GridApi->Update");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateCompositeGrid != null && updateCompositeGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCompositeGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCompositeGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Grid</returns>
        public async System.Threading.Tasks.Task<Grid> UpdateAsync (string gridId, UpdateGrid updateCompositeGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Grid> localVarResponse = await UpdateWithHttpInfoAsync(gridId, updateCompositeGrid, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gridId">gridId</param>
        /// <param name="updateCompositeGrid">updateCompositeGrid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Grid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Grid>> UpdateWithHttpInfoAsync (string gridId, UpdateGrid updateCompositeGrid, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'gridId' is set
            if (gridId == null)
                throw new ApiException(400, "Missing required parameter 'gridId' when calling GridApi->Update");
            // verify the required parameter 'updateCompositeGrid' is set
            if (updateCompositeGrid == null)
                throw new ApiException(400, "Missing required parameter 'updateCompositeGrid' when calling GridApi->Update");

            var localVarPath = "/v1/grids/{gridId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gridId != null) localVarPathParams.Add("gridId", this.Configuration.ApiClient.ParameterToString(gridId)); // path parameter
            if (updateCompositeGrid != null && updateCompositeGrid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateCompositeGrid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateCompositeGrid; // byte array
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Update", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Grid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Grid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Grid)));
        }

    }
}
