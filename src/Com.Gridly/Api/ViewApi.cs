/*
 * Gridly API
 *
 * Gridly API documentation
 *
 * The version of the OpenAPI document: 3.13.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Com.Gridly.Client;
using Com.Gridly.Model;

namespace Com.Gridly.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>Object</returns>
        Object Export (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ExportWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        View Get (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string));
        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns></returns>
        void ImportView (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ImportViewWithHttpInfo (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List&lt;View&gt;</returns>
        List<View> List (string branchId = default(string), string gridId = default(string), string type = default(string));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        ApiResponse<List<View>> ListWithHttpInfo (string branchId = default(string), string gridId = default(string), string type = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ExportAsync (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// export
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ExportWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ImportViewAsync (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// importView
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ImportViewWithHttpInfoAsync (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;View&gt;</returns>
        System.Threading.Tasks.Task<List<View>> ListAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// list
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<View>>> ListWithHttpInfoAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewApi : IViewApi
    {
        private Com.Gridly.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewApi(String basePath)
        {
            this.Configuration = new Com.Gridly.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// </summary>
        /// <returns></returns>
        public ViewApi()
        {
            this.Configuration = Com.Gridly.Client.Configuration.Default;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewApi(Com.Gridly.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Com.Gridly.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Com.Gridly.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Com.Gridly.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Com.Gridly.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>Object</returns>
        public Object Export (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string))
        {
             ApiResponse<Object> localVarResponse = ExportWithHttpInfo(viewId, columnIds, query, sort, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ExportWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");

            var localVarPath = "/v1/views/{viewId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ExportAsync (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Object> localVarResponse = await ExportWithHttpInfoAsync(viewId, columnIds, query, sort, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// export 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="type">type (optional, default to csv)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ExportWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), string query = default(string), string sort = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Export");

            var localVarPath = "/v1/views/{viewId}/export";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Export", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>View</returns>
        public View Get (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
             ApiResponse<View> localVarResponse = GetWithHttpInfo(viewId, columnIds, include, page, query, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse<View> GetWithHttpInfo (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");

            var localVarPath = "/v1/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "include", include)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<View> localVarResponse = await GetWithHttpInfoAsync(viewId, columnIds, include, page, query, sort, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="columnIds">columnIds (optional)</param>
        /// <param name="include">include (optional)</param>
        /// <param name="page">page (optional, default to &quot;{}&quot;)</param>
        /// <param name="query">query (optional, default to &quot;{}&quot;)</param>
        /// <param name="sort">sort (optional, default to &quot;{}&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> GetWithHttpInfoAsync (string viewId, List<string> columnIds = default(List<string>), List<string> include = default(List<string>), string page = default(string), string query = default(string), string sort = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->Get");

            var localVarPath = "/v1/views/{viewId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (columnIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "columnIds", columnIds)); // query parameter
            if (include != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "include", include)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Get", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns></returns>
        public void ImportView (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object))
        {
             ImportViewWithHttpInfo(viewId, file, importRequest, type);
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ImportViewWithHttpInfo (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");

            var localVarPath = "/v1/views/{viewId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (importRequest != null) localVarFormParams.Add("importRequest", this.Configuration.ApiClient.Serialize(importRequest)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.Serialize(type)); // form parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ImportViewAsync (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
             await ImportViewWithHttpInfoAsync(viewId, file, importRequest, type, cancellationToken);

        }

        /// <summary>
        /// importView 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewId">viewId</param>
        /// <param name="file">The following file types are supported: csv, tsv, xls, xlsx and JSON</param>
        /// <param name="importRequest">importRequest (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ImportViewWithHttpInfoAsync (string viewId, System.IO.Stream file, Object importRequest = default(Object), Object type = default(Object), CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'viewId' is set
            if (viewId == null)
                throw new ApiException(400, "Missing required parameter 'viewId' when calling ViewApi->ImportView");
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling ViewApi->ImportView");

            var localVarPath = "/v1/views/{viewId}/import";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewId != null) localVarPathParams.Add("viewId", this.Configuration.ApiClient.ParameterToString(viewId)); // path parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));
            if (importRequest != null) localVarFormParams.Add("importRequest", this.Configuration.ApiClient.Serialize(importRequest)); // form parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.Serialize(type)); // form parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ImportView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>List&lt;View&gt;</returns>
        public List<View> List (string branchId = default(string), string gridId = default(string), string type = default(string))
        {
             ApiResponse<List<View>> localVarResponse = ListWithHttpInfo(branchId, gridId, type);
             return localVarResponse.Data;
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <returns>ApiResponse of List&lt;View&gt;</returns>
        public ApiResponse<List<View>> ListWithHttpInfo (string branchId = default(string), string gridId = default(string), string type = default(string))
        {

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;View&gt;</returns>
        public async System.Threading.Tasks.Task<List<View>> ListAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<View>> localVarResponse = await ListWithHttpInfoAsync(branchId, gridId, type, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// list 
        /// </summary>
        /// <exception cref="Com.Gridly.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="branchId">branchId (optional)</param>
        /// <param name="gridId">gridId (optional)</param>
        /// <param name="type">type (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;View&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<View>>> ListWithHttpInfoAsync (string branchId = default(string), string gridId = default(string), string type = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/v1/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*",
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (branchId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "branchId", branchId)); // query parameter
            if (gridId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "gridId", gridId)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("List", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<View>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<View>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<View>)));
        }

    }
}
